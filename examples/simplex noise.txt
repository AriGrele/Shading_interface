mode:edit


shader_type canvas_item;

vec3 rotate(vec3 point, vec3 a){
	mat3 Rx = mat3(vec3(1,0,0),vec3(0,cos(a.x),-sin(a.x)),vec3(0,sin(a.x),cos(a.x)));
	mat3 Ry = mat3(vec3(cos(a.y),0,sin(a.y)),vec3(0,1,0),vec3(-sin(a.y),0,cos(a.y)));
	mat3 Rz = mat3(vec3(cos(a.z),-sin(a.z),0),vec3(sin(a.z),cos(a.z),0),vec3(0,0,1));
	return point*Rz*Rx*Ry;}

vec3 sphere(float x,float y, float side){
	vec3 point = vec3(x, y, side*sqrt(1.0-x*x-y*y));
	// point = rotate(p,0);	
	return point/length(point);}
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec3 _permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }

float snoise(vec3 v){ 
  vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
  vec3 cccx = vec3(C.x);
  vec3 cccy = vec3(C.y);
  vec4 D = vec4(0.0, 0.5, 1.0, 2.0);// First corner
  vec3 i  = floor(v + dot(v, cccy) );
  vec3 x0 =   v - i + dot(i, cccx) ;// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );
  vec3 x1 = x0 - i1 + 1.0 * cccx;
  vec3 x2 = x0 - i2 + 2.0 * cccx;
  vec3 x3 = x0 - 1.0 + 3.0 * cccx;// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));// Gradients
  float n_ = 1.0/7.0; // N=7 // ( N*N points uniformly over a square, mapped onto an octahedron.)
  vec3  ns = n_ * D.wyz - D.xzx;
  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)
  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
  vec4 x = x_ *ns.x + vec4(ns.y);
  vec4 y = y_ *ns.x + vec4(ns.y);
  vec4 h = 1.0 - abs(x) - abs(y);
  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));
  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}
vec4 octave(vec3 xyz, int octs, float p) {
	vec4  h = vec4(0.0);
	for (int q = 0; q < octs; q++){
		int Q = q;
		if(Q%1 == 0){
			float oct = (pow(p,float(Q)));
			h += snoise(xyz*oct)/oct;
			}
		}
	return vec4(h);
}
	
void fragment(){
	float pix = 1.0;
	float x = 3.0*pix;
	float y = 2.0*pix;
	vec2 xy = vec2(floor(UV.x*x)/x,floor(UV.y*y)/y);
	
	float p=(bi(UV,tex));
	COLOR=texture(pal,vec2(p,.1)).rgb;
	}